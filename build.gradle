plugins {
    id 'org.springframework.boot' version '2.5.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'com.github.node-gradle.node' version '3.0.1'
}

node {
    version='14.15.4'
    //npmVersion='6.14.11'
    //yarnVersion='1.22.10'
    //npmInstallCommand='install'
    //disBaseUrl='https://nodejs.org/dist'
    //workDir=file('${project.buildDir}/src/frontend')

    // Whether to download and install a specific Node.js version or not
    // If false, it will use the globally installed Node.js
    // If true, it will download node using above parameters
    // Note that npm is bundled with Node.js
    // 특정 Node.js 버전을 다운로드하여 설치할지 여부
    // false 인 경우 전역 설치된 Node.js를 사용합니다.
    // true 인 경우 위 매개 변수를 사용하여 노드를 다운로드합니다.
    // npm이 번들로 제공됩니다. Node.js
    download = true

    // Version of node to download and install (only used if download is true)
    // It will be unpacked in the workDir
    // 다운로드 및 설치할 노드의 버전 (다운로드가 true 인 경우에만 사용)
    // workDir
    version = "12.18.3"

    // Version of npm to use
    // If specified, installs it in the npmWorkDir
    // If empty, the plugin will use the npm command bundled with Node.js
    // 사용할 npm 버전
    // 지정된 경우 npmWorkDir에 설치합니다.
    // 비어있는 경우 플러그인은 Node.js와 함께 번들로 제공되는 npm 명령을 사용합니다.
    npmVersion = "6.14.11"

    // Version of Yarn to use
    // Any Yarn task first installs Yarn in the yarnWorkDir
    // It uses the specified version if defined and the latest version otherwise (by default)
    // 사용할 Yarn 버전
    // 모든 Yarn 작업은 먼저 yarnWorkDir에 Yarn을 설치합니다.
    // 정의 된 경우 지정된 버전을 사용하고 그렇지 않으면 최신 버전을 사용합니다 (기본값).
    yarnVersion = "1.22.10"

    // Base URL for fetching node distributions
    // Only used if download is true
    // Change it if you want to use a mirror
    // Or set to null if you want to add the repository on your own.
    // 노드 배포를 가져 오기위한 기본 URL
    // 다운로드가 true 인 경우에만 사용됩니다.
    // 미러를 사용하려면 변경합니다.
    // 또는 저장소를 직접 추가하려면 null로 설정합니다.
    distBaseUrl = "https://nodejs.org/dist"

    // The npm command executed by the npmInstall task
    // By default it is install but it can be changed to ci
    // npmInstall 작업에 의해 실행되는 npm 명령
    // 기본적으로 install이지만 ci 로 변경가능
    npmInstallCommand = "install"

    // The directory where Node.js is unpacked (when download is true)
    // Node.js가 압축 해제 된 디렉토리 (다운로드가 true 인 경우)
    workDir = file("${project.projectDir}/.gradle/nodejs")

    // The directory where npm is installed (when a specific version is defined)
    // npm이 설치된 디렉토리 (특정 버전이 정의 된 경우)
    //npmWorkDir = file("${project.projectDir}/.gradle/npm")
    npmWorkDir = file("${project.projectDir}/.gradle/npm")

    // The directory where yarn is installed (when a Yarn task is used)
    // yarn이 설치된 디렉토리 (Yarn 태스크 사용시)
    yarnWorkDir = file("${project.projectDir}/.gradle/yarn")

    // The Node.js project directory location
    // This is where the package.json file and node_modules directory are located
    // By default it is at the root of the current project
    // Node.js 프로젝트 디렉토리 위치
    // 이것은 package.json 파일과 node_modules 디렉토리가있는 위치입니다.
    // 기본적으로 현재 프로젝트의 루트에 있습니다.
    nodeProjectDir = file("${project.projectDir}/src/frontend/")

    // Whether the plugin automatically should add the proxy configuration to npm and yarn commands
    // according the proxy configuration defined for Gradle
    // Disable this option if you want to configure the proxy for npm or yarn on your own
    // (in the .npmrc file for instance)
    // 플러그인이 자동으로 npm 및 yarn 명령에 프록시 구성을 추가해야하는지 여부
    // Gradle에 정의 된 프록시 구성에 따라
    // npm 또는 yarn에 대한 프록시를 직접 구성하려는 경우
    // (. 예를 들어 npmrc 파일)
    nodeProxySettings = ProxySettings.SMART
}

group = 'dev.blog'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '16'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}
